// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: books.sql

package books

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO books (
    name, 
    description, 
    author_id, 
    rating,    
    published_at
) VALUES ($1, $2, $3, $4, $5) RETURNING id
`

type CreateParams struct {
	Name        string
	Description pgtype.Text
	AuthorID    string
	Rating      float64
	PublishedAt time.Time
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (string, error) {
	row := q.db.QueryRow(ctx, create,
		arg.Name,
		arg.Description,
		arg.AuthorID,
		arg.Rating,
		arg.PublishedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const delete = `-- name: Delete :execrows
DELETE FROM books WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id string) (int64, error) {
	result, err := q.db.Exec(ctx, delete, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const get = `-- name: Get :one
SELECT id, name, description, author_id, rating, published_at FROM books WHERE id = $1
`

func (q *Queries) Get(ctx context.Context, id string) (Book, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AuthorID,
		&i.Rating,
		&i.PublishedAt,
	)
	return i, err
}

const getAll = `-- name: GetAll :many
SELECT id, name, description, author_id, rating, published_at FROM books ORDER BY published_at
`

func (q *Queries) GetAll(ctx context.Context) ([]Book, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.AuthorID,
			&i.Rating,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :execrows
UPDATE books SET 
    name = $2, 
    description = $3, 
    author_id = $4, 
    rating = $5,    
    published_at = $6
 WHERE id = $1
`

type UpdateParams struct {
	ID          string
	Name        string
	Description pgtype.Text
	AuthorID    string
	Rating      float64
	PublishedAt time.Time
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (int64, error) {
	result, err := q.db.Exec(ctx, update,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.AuthorID,
		arg.Rating,
		arg.PublishedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
