// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: authors.sql

package authors

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO authors (
    name, 
    description
) VALUES ($1, $2) RETURNING id
`

type CreateParams struct {
	Name        string
	Description pgtype.Text
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (string, error) {
	row := q.db.QueryRow(ctx, create, arg.Name, arg.Description)
	var id string
	err := row.Scan(&id)
	return id, err
}

const get = `-- name: Get :one
SELECT id, name, description FROM authors WHERE id = $1
`

func (q *Queries) Get(ctx context.Context, id string) (Author, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getAll = `-- name: GetAll :many
SELECT 
    author.id, author.name, author.description, 
    COALESCE(AVG(book.rating), 0)::FLOAT AS average_rating 
FROM authors author 
    LEFT JOIN books book ON book.author_id = author.id
GROUP BY author.id
`

type GetAllRow struct {
	ID            string
	Name          string
	Description   pgtype.Text
	AverageRating float64
}

func (q *Queries) GetAll(ctx context.Context) ([]GetAllRow, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllRow
	for rows.Next() {
		var i GetAllRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.AverageRating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
